<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripts | SPEAC | Hans Rutger Bosker</title>
    <link>https://hrbosker.github.io/resources/scripts/</link>
      <atom:link href="https://hrbosker.github.io/resources/scripts/index.xml" rel="self" type="application/rss+xml" />
    <description>Scripts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://hrbosker.github.io/resources/scripts/featured.jpg</url>
      <title>Scripts</title>
      <link>https://hrbosker.github.io/resources/scripts/</link>
    </image>
    
    <item>
      <title>Save all</title>
      <link>https://hrbosker.github.io/resources/scripts/save-all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hrbosker.github.io/resources/scripts/save-all/</guid>
      <description>&lt;p&gt;Praat can only save one object at a time for you. If you have multiple objects in your object window you&amp;rsquo;d like to save in one go, you can use this script. It can either save objects by their object name or by their id number.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also &lt;a href=&#34;../save-all.praat&#34;&gt;download the script&lt;/a&gt; as a .praat file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;################################################################################
### Hans Rutger Bosker, Radboud University
### HansRutger.Bosker@ru.nl
### Date: 23 June 2022, run in Praat 6.2.12 on Windows 10
### License: CC BY-NC 4.0
################################################################################

	###&amp;gt;&amp;gt; This script saves all selected objects to the directory &amp;#39;dir_out$&amp;#39;
	###&amp;gt;&amp;gt;	with either:
	###&amp;gt;&amp;gt;   - their object name (e.g., &amp;#34;sentence1.wav&amp;#34;)
	###&amp;gt;&amp;gt;			&amp;gt; set variable &amp;#39;save_method$&amp;#39; to &amp;#34;name&amp;#34; [default]
	###&amp;gt;&amp;gt;   - their id number in the Praat object window (e.g., &amp;#34;42.wav&amp;#34;)
	###&amp;gt;&amp;gt;			&amp;gt; set variable &amp;#39;save_method$&amp;#39; to &amp;#34;id&amp;#34;
	###&amp;gt;&amp;gt;
	###&amp;gt;&amp;gt; Sounds are saved as .wav files,
	###&amp;gt;&amp;gt; other object types (TextGrids, Spectrum, etc.) are saved
	###&amp;gt;&amp;gt; with their own extension type (.TextGrid, .Spectrum).
	###&amp;gt;&amp;gt;
	###&amp;gt;&amp;gt; Default: the script will overwrite pre-existing files.
	###&amp;gt;&amp;gt; Set variable &amp;#39;overwrite$&amp;#39; to &amp;#34;no&amp;#34; if you want Praat
	###&amp;gt;&amp;gt; to throw an error instead.



################################################################################
### Variables you will definitely need to customize:
################################################################################

### Where should the selected objects be saved?

dir_out$ = &amp;#34;C:\Users\hanbos\mysounds&amp;#34;

### Should Praat overwrite pre-existing files?

overwrite$ = &amp;#34;yes&amp;#34;
#overwrite$ = &amp;#34;no&amp;#34;

### Do you want to save each object by its object name or by its id number?
### If object name, then use &amp;#34;name&amp;#34; (e.g., &amp;#34;sentence1.wav&amp;#34;).
### If object id number, then use &amp;#34;id&amp;#34; (e.g., &amp;#34;42.wav&amp;#34;).

save_method$ = &amp;#34;name&amp;#34;
#save_method$ = &amp;#34;id&amp;#34;





################################################################################
### Before we start, let&amp;#39;s check whether you&amp;#39;ve entered sensible
### input for the variables above...
################################################################################

### Let&amp;#39;s check if the output directory exists.
### This script will throw an error if the directory doesn&amp;#39;t exist
### (i.e., it won&amp;#39;t write to a mysterious temp directory).

### First check whether the input directory ends in a backslash (if so, removed)

if right$(dir_out$,1)=&amp;#34;/&amp;#34;
	dir_out$ = left$(dir_out$,length(dir_out$)-1)
elsif right$(dir_out$,1)=&amp;#34;\&amp;#34;
	dir_out$ = left$(dir_out$,length(dir_out$)-1)
endif

### Then create a temporary txt file in the folder
### and try to write it to the output folder.

### NOTE: The &amp;#34;nocheck&amp;#34; below asks Praat not to complain if the folder
### does *not* exist. We&amp;#39;ll manually check whether the saving of this
### temp txt file has succeeded or not further down below.

temp_filename$ = dir_out$ + &amp;#34;/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the directory exists&amp;#34;

### Can the file be found?

file_exists_yesno = fileReadable(temp_filename$)

if file_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the directory is valid.
	# Then you can delete it.
	deleteFile: temp_filename$
else
	# if that file wasn&amp;#39;t readable, that means that the directory wasn&amp;#39;t valid. 
	printline The folder &amp;#39;dir_out$&amp;#39; was not found
	exit Your directory doesn&amp;#39;t exist. Check spelling. The directory must *already* exist.
endif





################################################################################
################################################################################
#################################    SCRIPT    #################################
################################################################################
################################################################################

### Make sure you&amp;#39;ve selected the objects you&amp;#39;d like to save in
### the Praat object window. If nothing is selected, the script exits.

nSelected = numberOfSelected()
if nSelected = 0
	exit No objects selected.
endif

### Store the object id numbers in an array

for thisObject to nSelected
	objectArray [&amp;#39;thisObject&amp;#39;] = selected(&amp;#39;thisObject&amp;#39;)
endfor

### Loop through this array and for each id number
### select the corresponding object and save it.

for thisArrayNumber to nSelected
	objectId = objectArray [&amp;#39;thisArrayNumber&amp;#39;]
	select &amp;#39;objectId&amp;#39;
	type$ = extractWord$(selected$(), &amp;#34;&amp;#34;)
	name$ = extractLine$(selected$(), &amp;#34; &amp;#34;)
	
	if save_method$ = &amp;#34;name&amp;#34;
		if type$ = &amp;#34;Sound&amp;#34;
			does_file_exist = fileReadable(&amp;#34;&amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.wav&amp;#34;)
			if does_file_exist = 1
				if overwrite$ = &amp;#34;no&amp;#34;
					exit The file &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.wav&amp;#39; already exists! If you wish to overwrite, set the variable overwrite$ to &amp;#34;yes&amp;#34;.
				endif
			endif
			Write to WAV file... &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.wav
		else
			does_file_exist = fileReadable(&amp;#34;&amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.&amp;#39;type$&amp;#39;&amp;#34;)
			if does_file_exist = 1
				if overwrite$ = &amp;#34;no&amp;#34;
					exit The file &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.&amp;#39;type$&amp;#39; already exists! If you wish to overwrite, set the variable overwrite$ to &amp;#34;yes&amp;#34;.
				endif
			endif
			Write to text file... &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;.&amp;#39;type$&amp;#39;
		endif
	elsif save_method$ = &amp;#34;id&amp;#34;
		if type$ = &amp;#34;Sound&amp;#34;
			does_file_exist = fileReadable(&amp;#34;&amp;#39;dir_out$&amp;#39;\&amp;#39;objectId$&amp;#39;.wav&amp;#34;)
			if does_file_exist = 1
				if overwrite$ = &amp;#34;no&amp;#34;
					exit The file &amp;#39;dir_out$&amp;#39;\&amp;#39;objectId$&amp;#39;.wav&amp;#39; already exists! If you wish to overwrite, set the variable overwrite$ to &amp;#34;yes&amp;#34;.
				endif
			endif
			Write to WAV file... &amp;#39;dir_out$&amp;#39;\&amp;#39;objectId&amp;#39;.wav
		else
			does_file_exist = fileReadable(&amp;#34;&amp;#39;dir_out$&amp;#39;\&amp;#39;objectId$&amp;#39;.&amp;#39;type$&amp;#39;&amp;#34;)
			if does_file_exist = 1
				if overwrite$ = &amp;#34;no&amp;#34;
					exit The file &amp;#39;dir_out$&amp;#39;\&amp;#39;objectId$&amp;#39;.&amp;#39;type$&amp;#39; already exists! If you wish to overwrite, set the variable overwrite$ to &amp;#34;yes&amp;#34;.
				endif
			endif
			Write to text file... &amp;#39;dir_out$&amp;#39;\&amp;#39;objectId&amp;#39;.&amp;#39;type$&amp;#39;
		endif
	endif
endfor

### Now set the selection back to what it was before running this script.

for current to nSelected
	objectId = objectArray [&amp;#39;current&amp;#39;]
	if current = 1
		select &amp;#39;objectId&amp;#39;
	else
		plus &amp;#39;objectId&amp;#39;
	endif
endfor

################################################################################
# End of script
################################################################################
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Annotate</title>
      <link>https://hrbosker.github.io/resources/scripts/annotate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hrbosker.github.io/resources/scripts/annotate/</guid>
      <description>&lt;p&gt;This script streamlines an annotation workflow: it presents a TextGrid for manual annotation to the user, you perform some changes, and when you click Next, it automatically saves the changes and presents the next TextGrid, and so on. This is particularly useful for when you have forced aligned TextGrids (e.g., from &lt;a href=&#34;https://hrbosker.github.io/resources/other-resources/#videoaudio-editing&#34;&gt;WebMAUS&lt;/a&gt; or &lt;a href=&#34;https://hrbosker.github.io/resources/other-resources/#videoaudio-editing&#34;&gt;EasyAlign&lt;/a&gt;) that you&amp;rsquo;d like to manually evaluate and edit.&lt;/p&gt;
&lt;p&gt;Moreover, the script keeps track of who annotated what, can continue where you left off yesterday, allows users to enter comments about their annotations, and blinds file names to avoid human annotation biases. The script can be updated to present new empty TextGrids (instead of any pre-existing ones, in case you only have .wav files) or to automatically perform changes to TextGrid tiers/intervals before presenting them for manual annotation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also &lt;a href=&#34;../annotate.praat&#34;&gt;download the script&lt;/a&gt; as a .praat file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;################################################################################
### Hans Rutger Bosker, Radboud University
### HansRutger.Bosker@ru.nl
### Date: 30 June 2022, run in Praat 6.2.12 on Windows 10
### License: CC BY-NC 4.0
################################################################################

	###&amp;gt;&amp;gt; This script reads a directory containing sound files with pre-existing TextGrids,
	###&amp;gt;&amp;gt;	for instance resulting from a forced aligner (e.g., WebMAUS or EasyAlign).
	###&amp;gt;&amp;gt;	IMPORTANT: Every Sound should have a pre-existing TextGrid file **with the same name**!
	###&amp;gt;&amp;gt;	It opens every Sound + Textgrid combination, presents it to the user for editing,
	###&amp;gt;&amp;gt;	allows the user to enter comments about the annotations, and then saves the
	###&amp;gt;&amp;gt;	edited TextGrid with &amp;#34;_edited&amp;#34; suffix in the subfolder &amp;#39;edited_textgrids&amp;#39;.
	###&amp;gt;&amp;gt;	User comments are tracked in the file &amp;#39;annotation_log.txt&amp;#39; in the same subfolder.
	###&amp;gt;&amp;gt;	
	###&amp;gt;&amp;gt;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; If you **do not** yet have pre-existing TextGrids (i.e., only sound files),	&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
	###&amp;gt;&amp;gt;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; you can adjust the script to read all .wav files, create new empty TextGrids,	&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
	###&amp;gt;&amp;gt;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; and present those for editing and saving...									&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
	###&amp;gt;&amp;gt;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; See the line with &amp;#34;CREATE EMPTY TEXTGRIDS&amp;#34;									&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
	###&amp;gt;&amp;gt;
	###&amp;gt;&amp;gt; This script can be run by multiple users simultaneously, for instance when
	###&amp;gt;&amp;gt;   multiple annotators are working on the same shared folder. It keeps track
	###&amp;gt;&amp;gt;   of what files have already been edited: it only presents TextGrids for editing
	###&amp;gt;&amp;gt;   that do not yet have an &amp;#34;_edited&amp;#34; version pre-existing in the subfolder.
	###&amp;gt;&amp;gt;   This also means that users can close the script or Praat at anytime
	###&amp;gt;&amp;gt;   without losing data. Then, next time someone runs the script, it will
	###&amp;gt;&amp;gt;   start with the files that are &amp;#39;left over&amp;#39; from the previous run.
	###&amp;gt;&amp;gt;	NOTE: This checking of which files already exist can slow the script down
	###&amp;gt;&amp;gt;	when working with folders with &amp;gt;5000 files...
	###&amp;gt;&amp;gt;
	###&amp;gt;&amp;gt; At present, the script **only** presents pre-existing tiers and intervals
	###&amp;gt;&amp;gt;   for editing (e.g., adding boundaries, dragging boundaries around, etc.).
	###&amp;gt;&amp;gt;   This script can be augmented by automatically adding tiers or intervals
	###&amp;gt;&amp;gt;   before the TextGrid is presented for editing, so users can annotate
	###&amp;gt;&amp;gt;   new tiers/intervals. See the line with &amp;#34;ADD/REMOVE TIERS HERE&amp;#34;.

################################################################################
### Variables you will definitely need to customize:
################################################################################

### Where can the Sound and TextGrid files be found?

dir_in$ = &amp;#34;C:\Users\hanbos\mysounds&amp;#34;

### Do you want to use &amp;#39;blinded&amp;#39; objects in Praat to avoid human biases in annotation?
### Default value: &amp;#34;yes&amp;#34;
### Change to &amp;#34;no&amp;#34; if you want to use original object names.

blinded$ = &amp;#34;yes&amp;#34;





################################################################################
### Before we start, let&amp;#39;s check whether you&amp;#39;ve entered sensible
### input for the variables above...
################################################################################

### Let&amp;#39;s check if the input directory exists.
### This script will throw an error if the directory doesn&amp;#39;t exist
### (i.e., it won&amp;#39;t write to a mysterious temp directory).

### First check whether the input directory ends in a backslash (if so, removed)

if right$(dir_in$,1)=&amp;#34;/&amp;#34;
	dir_in$ = left$(dir_in$,length(dir_in$)-1)
elsif right$(dir_in$,1)=&amp;#34;\&amp;#34;
	dir_in$ = left$(dir_in$,length(dir_in$)-1)
endif

### Then create a temporary txt file in the folder
### and try to write it to the input folder.

### NOTE: The &amp;#34;nocheck&amp;#34; below asks Praat not to complain if the folder
### does *not* exist. We&amp;#39;ll manually check whether the saving of this
### temp txt file has succeeded or not further down below.

temp_filename$ = dir_in$ + &amp;#34;/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the directory exists&amp;#34;

### Can the file be found?

file_exists_yesno = fileReadable(temp_filename$)

if file_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the directory is valid.
	# Then you can delete it.
	deleteFile: temp_filename$
else
	# if that file wasn&amp;#39;t readable, that means that the directory wasn&amp;#39;t valid. 
	printline The folder &amp;#39;dir_in$&amp;#39; was not found
	exit Your directory doesn&amp;#39;t exist. Check spelling. The directory must *already* exist.
endif

## Let&amp;#39;s also check whether a subfolder with edited TextGrids already exists,
## for instance when the script has been run and exited before.

temp_filename$ = dir_in$ + &amp;#34;/edited_textgrids/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the subfolder exists&amp;#34;

### Can the file be found?

subfolderfile_exists_yesno = fileReadable(temp_filename$)

if subfolderfile_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the subfolder already exists.
	# Then you can delete it.
	deleteFile: temp_filename$
else
	# if it didn&amp;#39;t yet exist, let&amp;#39;s create the subfolder
	createFolder: &amp;#34;&amp;#39;dir_in$&amp;#39;/edited_textgrids&amp;#34;
endif





################################################################################
################################################################################
#################################    SCRIPT    #################################
################################################################################
################################################################################

## Let&amp;#39;s keep track of who annotated which file. This can be helpful when
## multiple annotators run the same script on the same shared folder.

beginPause: &amp;#34;Please enter your name:&amp;#34;
	text: &amp;#34;annotator&amp;#34;, &amp;#34;&amp;#34;
clicked = endPause: &amp;#34;Next&amp;#34;, 1

## Now we create a list of TextGrid files in the input directory:

Create Strings as file list: &amp;#34;list_of_files&amp;#34;, &amp;#34;&amp;#39;dir_in$&amp;#39;/*.TextGrid&amp;#34;

	#######################################################################################
	## CREATE EMPTY TEXTGRIDS
	########################
	## If you do not yet have pre-existing TextGrids (but a folder with only sound files instead),
	## you can read the sound files in the directory and create empty TextGrids for the user
	## to edit.
	## Adjust this script as follows:
	## - Change *.TextGrid to *.wav in the line above.
	## - Change *.TextGrid to *.wav in the line below starting with &amp;#34;extposition$&amp;#34;
	## - Replace this line: Read from file... &amp;#39;dir_in$&amp;#39;\&amp;#39;name$&amp;#39;.TextGrid
	##		with this line: To TextGrid: &amp;#34;manual&amp;#34;, &amp;#34;&amp;#34;
	#######################################################################################

nfiles = Get number of strings
if nfiles = 0
	exit The directory &amp;#39;dir_in$&amp;#39; does not contain any TextGrid files.
endif

## By randomizing this file list, it allows for multiple users to simultanously work
## on the same folder without overwriting previous annotations. It also reduces the risk
## of human biases in annotations (e.g., annotator fatigue affecting one condition more
## than another condition).

Randomize

## Now we&amp;#39;ll loop through the list and present individual files...

for i from 1 to &amp;#39;nfiles&amp;#39;
	select Strings list_of_files
	
	fileplusext$ = Get string... &amp;#39;i&amp;#39;
	extposition = index(fileplusext$, &amp;#34;.TextGrid&amp;#34;)
	name$ = left$(fileplusext$, (&amp;#39;extposition&amp;#39;-1))

	outname$ = &amp;#34;&amp;#39;name$&amp;#39;_edited&amp;#34;
	fulloutname$ = &amp;#34;&amp;#39;dir_in$&amp;#39;/edited_textgrids/&amp;#39;outname$&amp;#39;.TextGrid&amp;#34;

	## Let&amp;#39;s check if an &amp;#34;_edited&amp;#34; version already exists.
	## The script only presents those files for editing that do not yet have been edited before.
	
	editedfile_exists_yesno = fileReadable(fulloutname$)
	if editedfile_exists_yesno
		do_nothing = 1
	else
		Read from file... &amp;#39;dir_in$&amp;#39;\&amp;#39;name$&amp;#39;.wav
		if blinded$ = &amp;#34;yes&amp;#34;
			Rename... current_Sound
		endif
		sound_name$ = selected$(&amp;#34;Sound&amp;#34;)
		## If a filename contains spaces, Praat replaces these spaces with underscores.
		## Example: &amp;#34;file number 1.wav&amp;#34; in a given folder becomes
		##			&amp;#34;file_number_1.wav&amp;#34; in the Praat object window.
		## Therefore, it is important **not** to use a filename variable (here: &amp;#39;name$&amp;#39;)
		## in &amp;#39;selecting commands&amp;#39; in Praat, like &amp;#39;select&amp;#39; and &amp;#39;plus&amp;#39;!
		## Better still: do not use spaces in filenames!
		
		Read from file... &amp;#39;dir_in$&amp;#39;\&amp;#39;name$&amp;#39;.TextGrid
		if blinded$ = &amp;#34;yes&amp;#34;
			Rename... current_TextGrid
		endif
		tg_name$ = selected$(&amp;#34;TextGrid&amp;#34;)

		#######################################################################################
		## ADD/REMOVE TIERS HERE
		########################
		## This is where we you could adjust the script to automatically add/remove tiers
		## and/or automatically adjust intervals (setting them to the nearest zero crossings?).
		## Duplicating tiers can be helpful when you want to view original vs. manually edited
		## tiers below/above each other in one and the same edited TextGrid.
		## Example:
		## &amp;gt; Duplicate tier... 1 1 newtier
		## [ARGUMENTS: position_of_tier_to_duplicate position_for_new_tier name_of_new_tier]
		#######################################################################################

		plus Sound &amp;#39;sound_name$&amp;#39;
		Edit

		beginPause: &amp;#34;Please check and edit this TextGrid.&amp;#34;
			comment: &amp;#34;Please check and edit the annotations.&amp;#34;
			text: &amp;#34;Comments&amp;#34;, &amp;#34;&amp;#34;
		clicked = endPause: &amp;#34;Next&amp;#34;, 1
		
		editor TextGrid &amp;#39;tg_name$&amp;#39;
			Close
		endeditor

		select TextGrid &amp;#39;tg_name$&amp;#39;
		Write to text file... &amp;#39;fulloutname$&amp;#39;
		plus Sound &amp;#39;sound_name$&amp;#39;
		Remove

		appendFileLine: &amp;#34;&amp;#39;dir_in$&amp;#39;/edited_textgrids/annotation_log.txt&amp;#34;, annotator$, tab$, name$, tab$, comments$
	endif
endfor

select Strings list_of_files
Remove

################################################################################
# End of script
################################################################################
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Batch processing</title>
      <link>https://hrbosker.github.io/resources/scripts/batch-processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hrbosker.github.io/resources/scripts/batch-processing/</guid>
      <description>&lt;p&gt;This script is an in-house template / starting point for batch processing multiple files. Adapt it to your own needs to apply a particular function to multiple files or multiple time intervals within each file.&lt;/p&gt;
&lt;p&gt;In its current form, the script reads each .wav file &lt;em&gt;plus&lt;/em&gt; accompanying TextGrid in a given input directory, extracts all non-empty intervals individually, and then loops over those to find the ones labelled &amp;ldquo;vowel&amp;rdquo;. It then allows the user to apply a particular function to those intervals (such as &lt;code&gt;Scale intensity: 65&lt;/code&gt;), after which it concatenates the individual intervals back together, and saves the output in an output directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In its current form, the script does not run any function on its input. It really only serves as a starting point, including snippets of code we regularly use and now do not need to look up every time we want to do batch processing in Praat.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also &lt;a href=&#34;../batch-processing.praat&#34;&gt;download the script&lt;/a&gt; as a .praat file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;################################################################################
### Hans Rutger Bosker, Radboud University
### HansRutger.Bosker@ru.nl
### Date: 6 July 2022, run in Praat 6.2.12 on Windows 10
### License: CC BY-NC 4.0
################################################################################


	###&amp;gt;&amp;gt; This script is a starting point for batch processing a set of files.
	###&amp;gt;&amp;gt;	The script basically reads files in an input directory and runs a
	###&amp;gt;&amp;gt;	a to-be-defined function [see &amp;#39;Perform your function here&amp;#39; below]
	###&amp;gt;&amp;gt;	and writes the output to an output directory . This saves me having
	###&amp;gt;&amp;gt;	to look up how to create a file list, how to loop over files, etc.
	###&amp;gt;&amp;gt;	
	###&amp;gt;&amp;gt; Since this was basically intended for in-house use, I&amp;#39;ve added in bits
	###&amp;gt;&amp;gt;	and pieces that I find useful to have ready-to-go, such as:
	###&amp;gt;&amp;gt;	&amp;#39;beginPause&amp;#39; for manually specifying variables.

################################################################################
### Variables you will definitely need to customize:
################################################################################

### Where can the files be found?

dir_in$ = &amp;#34;C:\Users\hanbos\mysounds&amp;#34;

### Where should the output files be saved?

dir_out$ = &amp;#34;C:\Users\hanbos\mysounds\output&amp;#34;





################################################################################
### Let&amp;#39;s check whether the directories specified above exist...
################################################################################

### Let&amp;#39;s check if the input directory exists.
### This script will throw an error if the directory doesn&amp;#39;t exist
### (i.e., it won&amp;#39;t write to a mysterious temp directory).

### First check whether the input directory ends in a backslash (if so, removed)

if right$(dir_in$,1)=&amp;#34;/&amp;#34;
	dir_in$ = left$(dir_in$,length(dir_in$)-1)
elsif right$(dir_in$,1)=&amp;#34;\&amp;#34;
	dir_in$ = left$(dir_in$,length(dir_in$)-1)
endif

### Then create a temporary txt file in the folder
### and try to write it to the input folder.

### NOTE: The &amp;#34;nocheck&amp;#34; below asks Praat not to complain if the folder
### does *not* exist. We&amp;#39;ll manually check whether the saving of this
### temp txt file has succeeded or not further down below.

temp_filename$ = dir_in$ + &amp;#34;/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the directory exists&amp;#34;

### Can the file be found?

file_exists_yesno = fileReadable(temp_filename$)

if file_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the directory is valid.
	# Then you can delete it.
	deleteFile: temp_filename$
else
	# if that file wasn&amp;#39;t readable, that means that the directory wasn&amp;#39;t valid. 
	printline The folder &amp;#39;dir_in$&amp;#39; was not found
	exit Your input directory doesn&amp;#39;t exist. Check spelling. The directory must *already* exist.
endif

## Now re-do this for the output directory:

if right$(dir_out$,1)=&amp;#34;/&amp;#34;
	dir_out$ = left$(dir_out$,length(dir_out$)-1)
elsif right$(dir_out$,1)=&amp;#34;\&amp;#34;
	dir_out$ = left$(dir_out$,length(dir_out$)-1)
endif

### Then create a temporary txt file in the folder
### and try to write it to the input folder.

### NOTE: The &amp;#34;nocheck&amp;#34; below asks Praat not to complain if the folder
### does *not* exist. We&amp;#39;ll manually check whether the saving of this
### temp txt file has succeeded or not further down below.

temp_filename$ = dir_out$ + &amp;#34;/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the directory exists&amp;#34;

### Can the file be found?

file_exists_yesno = fileReadable(temp_filename$)

if file_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the directory is valid.
	# Then you can delete it.
	deleteFile: temp_filename$
else
	# if that file wasn&amp;#39;t readable, that means that the directory wasn&amp;#39;t valid. 
	printline The folder &amp;#39;dir_out$&amp;#39; was not found
	exit Your output directory doesn&amp;#39;t exist. Check spelling. The directory must *already* exist.
endif





###########################################################################
##	FORM TO MANUALLY SPECIFY VARIABLES
###########################################################################
#beginPause: &amp;#34;Enter settings&amp;#34;
#	comment: &amp;#34;Provide instructions here&amp;#34;
#	real: &amp;#34;minPitch&amp;#34;, 70
#	real: &amp;#34;maxPitch&amp;#34;, 250
#	choice: &amp;#34;method&amp;#34;, 1
#	   option: &amp;#34;Flip F0 contour&amp;#34;
#	   option: &amp;#34;Expand/Contract F0 contour&amp;#34;
#	   option: &amp;#34;Flatten F0 contour&amp;#34;
#clicked = endPause (&amp;#34;Cancel&amp;#34;, &amp;#34;OK&amp;#34;, 2)
###########################################################################
###########################################################################





## Let&amp;#39;s create a list of all the files in the input directory.

Create Strings as file list: &amp;#34;list_of_files&amp;#34;, &amp;#34;&amp;#39;dir_in$&amp;#39;/*.wav&amp;#34;

nfiles = Get number of strings
if nfiles = 0
	exit The directory &amp;#39;dir_in$&amp;#39; does not contain any .wav files.
endif

## Now we&amp;#39;ll loop through the list...

for i from 1 to &amp;#39;nfiles&amp;#39;
	select Strings list_of_files
	
	fileplusext$ = Get string... &amp;#39;i&amp;#39;
	extposition = index(fileplusext$, &amp;#34;.wav&amp;#34;)
	name$ = left$(fileplusext$, (&amp;#39;extposition&amp;#39;-1))

	Read from file... &amp;#39;dir_in$&amp;#39;\&amp;#39;name$&amp;#39;.wav
	Read from file... &amp;#39;dir_in$&amp;#39;\&amp;#39;name$&amp;#39;.TextGrid
	plus Sound &amp;#39;name$&amp;#39;
	Extract non-empty intervals... 1 no
	
	nSelected = numberOfSelected()

	## Assign an object number to each object (e.g., 1-5),
	## and save the id numbers of each object to an array.

	for thisObject to nSelected
		objectArray [&amp;#39;thisObject&amp;#39;] = selected(&amp;#39;thisObject&amp;#39;)
	endfor

	for j to nSelected
		curr_objectId = objectArray [&amp;#39;j&amp;#39;]
		select &amp;#39;curr_objectId&amp;#39;
		curr_objectName$ = selected$(&amp;#34;Sound&amp;#34;)
		
		if curr_objectName$ = &amp;#34;vowel&amp;#34;

			########################################################################
			# Perform your function here!
			#	Example: Scale intensity... 65
			########################################################################

		endif
	endfor

	for j from 1 to nSelected
		curr_objectId = objectArray [&amp;#39;j&amp;#39;]
		if j = 1
			select &amp;#39;curr_objectId&amp;#39;
		else
			plus &amp;#39;curr_objectId&amp;#39;
		endif
	endfor
	Concatenate recoverably

	select Sound chain
	Write to WAV file... &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;_manipulated.wav
	select TextGrid chain
	Write to text file... &amp;#39;dir_out$&amp;#39;\&amp;#39;name$&amp;#39;_manipulated.TextGrid

	## Cleaning up...
	for j from 1 to nSelected
		curr_objectId = objectArray [&amp;#39;j&amp;#39;]
		if j = 1
			select &amp;#39;curr_objectId&amp;#39;
		else
			plus &amp;#39;curr_objectId&amp;#39;
		endif
	endfor
	plus Sound chain
	plus TextGrid chain
	plus Sound &amp;#39;name$&amp;#39;
	plus TextGrid &amp;#39;name$&amp;#39;
	Remove

endfor

select Strings list_of_files
Remove

################################################################################
# End of script
################################################################################
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Move to zero-crossings</title>
      <link>https://hrbosker.github.io/resources/scripts/move-to-zero-crossings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://hrbosker.github.io/resources/scripts/move-to-zero-crossings/</guid>
      <description>&lt;p&gt;This script automatically moves all boundaries in a given tier in a TextGrid file to zero-crossings, which is important for extracting sound intervals. Specifically, it adds a tier &amp;rsquo;to0x&amp;rsquo; at the top of the TextGrid that is identical to a given input tier, except that all boundaries are at zero-crossings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also &lt;a href=&#34;../move-to-zero-crossings.praat&#34;&gt;download the script&lt;/a&gt; as a .praat file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;################################################################################
### Hans Rutger Bosker, Radboud University
### HansRutger.Bosker@ru.nl
### Date: 22 July 2022, run in Praat 6.2.12 on Windows 10
### License: CC BY-NC 4.0
################################################################################

	###&amp;gt;&amp;gt; This script takes a single .wav and matching .TextGrid file as input
	###&amp;gt;&amp;gt;   and moves all boundaries in one particular tier to zero-crossings.

	###&amp;gt;&amp;gt;   Specifically, it *adds* a new &amp;#39;to0x&amp;#39; tier at the top of the TextGrid
	###&amp;gt;&amp;gt;   that is identical to a given tier except that all boundaries are
	###&amp;gt;&amp;gt;   at zero-crossings. The old TextGrid is then overwritten with the
	###&amp;gt;&amp;gt;   new extended TextGrid, but no information is lost (only added).

	###&amp;gt;&amp;gt;   This script works best if the script also subtracts the mean from
	###&amp;gt;&amp;gt;   the audio signal, and overwrites the original audio:
	###&amp;gt;&amp;gt;	&amp;#39;method&amp;#39; option 1 (default).

	###&amp;gt;&amp;gt;	If you need to move the boundaries for more than one TextGrid file,
	###&amp;gt;&amp;gt;	you can merge this script with &amp;#39;batch-processing.praat&amp;#39;,
	###&amp;gt;&amp;gt;	see: https://hrbosker.github.io/resources/scripts/batch-processing/


################################################################################
### Form to enter variables
################################################################################
beginPause: &amp;#34;Enter settings&amp;#34;
	comment: &amp;#34;Provide the directory of the sound and TextGrid file (no slash at end of string)&amp;#34;
	text: &amp;#34;directory&amp;#34;, &amp;#34;C:/Users/hanbos/mysounds&amp;#34;
	comment: &amp;#34;Provide the name of the sound file&amp;#34;
	comment: &amp;#34;(should be identical to TextGrid name)&amp;#34;
	comment: &amp;#34;NOTE: do NOT include any extension (no .wav)&amp;#34;
	text: &amp;#34;filename&amp;#34;, &amp;#34;syll1&amp;#34;
	comment: &amp;#34;Provide the interval tier number (typically 1)&amp;#34;
	real: &amp;#34;tierNumber&amp;#34;, 1
	choice: &amp;#34;method&amp;#34;, 1
	   option: &amp;#34;Subtract mean and overwrite audio file&amp;#34;
	   option: &amp;#34;Do not subtract mean&amp;#34;
clicked = endPause (&amp;#34;Cancel&amp;#34;, &amp;#34;OK&amp;#34;, 2)



################################################################################
### Before we start, let&amp;#39;s check whether you&amp;#39;ve entered sensible
### input for the variables above...
################################################################################

### Let&amp;#39;s check if the directory exists.
### This script will throw an error if the directory doesn&amp;#39;t exist
### (i.e., it won&amp;#39;t write to a mysterious temp directory).

### First check whether the input directory ends in a backslash (if so, removed)

if right$(directory$,1)=&amp;#34;/&amp;#34;
	directory$ = left$(directory$,length(directory$)-1)
elsif right$(directory$,1)=&amp;#34;\&amp;#34;
	directory$ = left$(directory$,length(directory$)-1)
endif

### Then create a temporary txt file in the folder
### and try to write it to the input folder.

### NOTE: The &amp;#34;nocheck&amp;#34; below asks Praat not to complain if the folder
### does *not* exist. We&amp;#39;ll manually check whether the saving of this
### temp txt file has succeeded or not further down below.

temp_filename$ = directory$ + &amp;#34;/&amp;#34; + &amp;#34;my_temporary_Praat_file.txt&amp;#34;
nocheck writeFileLine: temp_filename$, &amp;#34;This is just to check if the directory exists&amp;#34;

### Can the file be found?

file_exists_yesno = fileReadable(temp_filename$)

if file_exists_yesno = 1
	# if you *could* read that temp txt file,
	# this confirms that the directory is valid.
	# Then you can delete it.
	deleteFile: temp_filename$

	## Let&amp;#39;s also check whether the specified wav and TextGrid filenames exist
	## inside this particular directory.

	filepath$ = directory$ + &amp;#34;/&amp;#34; + filename$ + &amp;#34;.wav&amp;#34;
	wavFileExists = fileReadable(filepath$)

	if wavFileExists = 0
		# if the wav file does not exist
		printline Could not find &amp;#39;filename$&amp;#39;.wav in the folder &amp;#39;directory$&amp;#39;
		exit Could not find &amp;#39;filename$&amp;#39;.wav in the folder &amp;#39;directory$&amp;#39;. Check spelling.
	endif

	filepath$ = directory$ + &amp;#34;/&amp;#34; + filename$ + &amp;#34;.TextGrid&amp;#34;
	tgFileExists = fileReadable(filepath$)

	if tgFileExists = 0
		# if the TextGrid file does not exist
		printline Could not find &amp;#39;filename$&amp;#39;.TextGrid in the folder &amp;#39;directory$&amp;#39;
		exit Could not find &amp;#39;filename$&amp;#39;.TextGrid in the folder &amp;#39;directory$&amp;#39;. Check spelling.
	endif
else
	# if the temporary file wasn&amp;#39;t readable, that means that the directory wasn&amp;#39;t valid. 
	printline The folder &amp;#39;directory$&amp;#39; was not found
	exit Your directory doesn&amp;#39;t exist. Check spelling. The directory must *already* exist.
endif



################################################################################
################################################################################
#################################    SCRIPT    #################################
################################################################################
################################################################################

Read from file... &amp;#39;directory$&amp;#39;\&amp;#39;filename$&amp;#39;.wav
if method = 1
	Subtract mean
	Write to WAV file... &amp;#39;directory$&amp;#39;\&amp;#39;filename$&amp;#39;.wav
endif
Read from file... &amp;#39;directory$&amp;#39;\&amp;#39;filename$&amp;#39;.TextGrid
nInts = Get number of intervals... &amp;#39;tierNumber&amp;#39;
Insert interval tier... 1 to0x

for i to (&amp;#39;nInts&amp;#39;-1)
	select TextGrid &amp;#39;filename$&amp;#39;
	intEnd = Get end point... (&amp;#39;tierNumber&amp;#39;+1) &amp;#39;i&amp;#39;
	intLab$ = Get label of interval... (&amp;#39;tierNumber&amp;#39;+1) &amp;#39;i&amp;#39;
	select Sound &amp;#39;filename$&amp;#39;
	zxEnd = Get nearest zero crossing... 1 &amp;#39;intEnd&amp;#39;
	select TextGrid &amp;#39;filename$&amp;#39;
	Insert boundary... 1 zxEnd
	Set interval text... 1 &amp;#39;i&amp;#39; &amp;#39;intLab$&amp;#39;
endfor
intLab$ = Get label of interval... (&amp;#39;tierNumber&amp;#39;+1) &amp;#39;nInts&amp;#39;
Set interval text... 1 &amp;#39;nInts&amp;#39; &amp;#39;intLab$&amp;#39;

Write to text file... &amp;#39;directory$&amp;#39;\&amp;#39;filename$&amp;#39;.TextGrid
Remove
select Sound &amp;#39;filename$&amp;#39;
Remove

################################################################################
# End of script
################################################################################
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
